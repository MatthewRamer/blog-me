// Import dependencies
const express = require('express');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const path = require('path');
const mongoose = require('mongoose');
const cors = require('cors');
const bcrypt = require('bcrypt');

// Import handlers
const homeHandler = require('./controllers/home.js');
const roomHandler = require('./controllers/room.js');
const nickHandler = require('./controllers/nick.js');
const nicknameHandler = require('./controllers/nickname.js');
const msgHandler = require('./controllers/message.js');

const Message = require('./models/msg.js');
const Room = require('./models/chatroom.js');
const User = require('./models/user.js'); // Import User model

const { roomIdGenerator } = require('./util/roomIdGenerator.js');
const { allowInsecurePrototypeAccess } = require('@handlebars/allow-prototype-access');

const app = express();
const port = 8080;

// MongoDB connection string and options
const uri = "mongodb+srv://ahan058:DHXXha0ZrqiVCKcT@cluster0.hj10yd6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
//const uri = "mongodb+srv://drios027:rCVT5TkScEiP0Pdw@cs110-project.rtlhbad.mongodb.net/";
//rCVT5TkScEiP0Pdw

const clientOptions = {
    serverApi: { version: '1', strict: true, deprecationErrors: true }
};

// Middleware setup
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'frontend', 'dist'))); // Serve the static files from the React app
app.use(session({ secret: 'your-secret-key', resave: false, saveUninitialized: true }));
app.use(nicknameHandler);

// MongoDB connection
mongoose.connect(uri, clientOptions)
    .then(() => {
        console.log('Connected to MongoDB');
        
        
        app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'frontend', 'dist', 'index.html'));
          });

        // API routes
        app.post('/newProfile', async (req, res) => {
            const { email, password, nickname, gender, age, bio } = req.body;

            try {
                const hashPass = await bcrypt.hash(password, 10);
                const newUser = new User({
                    email,
                    password: hashPass,
                    nickname,
                    gender,
                    age,
                    bio
                });
                await newUser.save();
                res.redirect('/'); // Redirect to home page
            } catch (err) {
                console.error('Error creating user:', err);
                res.status(500).send('Internal server error.');
            }
        });

        app.post('/verifyUser', async (req, res) => {
            const userEmail = req.body.email;
            console.log("inside server.js printing email:", userEmail);

            try {
                const userExists = await User.findOne({ email: userEmail });
                if (userExists) {
                    //User exists in the DB, redirects user to the home page
                    res.redirect('/');
                } else {
                    //User doesn't exist in the DB, redirects user to the new profile page
                    console.log("Email is not in our Database");
                    res.redirect('/newProfile');
                }
            } catch (err) {
                console.error('Error verifying user:', err);
                res.status(500).send('Internal server error.');
            }
        });

        app.post('/sendMessage', msgHandler.postMessage);

        app.post('/editMessage', async (req, res) => {
            const { msgId, name, text } = req.body;
            console.log('Inside editMessage: ', req.body);
            res.render('editMessage', { text, nickname: name });
        });

        app.post('/create', async (req, res) => {
            const roomName = req.body.roomName;
            req.session.nickname = req.body.nickname;

            if (!roomName || roomName.trim() === '') {
                return res.send('Room name is required and cannot be empty.');
            }

            try {
                const exist = await Room.findOne({ name: roomName });
                if (exist) {
                    return res.send('Identical room name already exists!');
                }

                const newRoom = new Room({
                    id: roomIdGenerator(), //from util!
                    name: roomName
                });

                await newRoom.save();
                res.redirect('/'); // Redirect to home page

            } catch (err) {
                console.error('Error creating room:', err);
                res.status(500).send('Internal server error.');
            }
        });

        

    
        app.listen(port, () => console.log(`Server listening on http://localhost:${port}`));
    })
    .catch(err => {
        console.error('Failed to connect to MongoDB', err);
    });
